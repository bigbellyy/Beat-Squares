class Notes {
    static source = undefined;
    static rawNotes = [];
    static difficulty = undefined;
    static audio = undefined;
    static alreadyRan = false;
    static stopEffect = false;
    static showDropper() {
        let dropper = document.createElement("div");
        Notes.dropper = dropper;
        dropper.style.width = String(screen.width + "px");
        dropper.style.height = String(screen.height + "px");
        dropper.style.opacity = 0;
        dropper.style.position = "absolute";
        dropper.style.zIndex = "99";
        dropper.innerHTML = "Drop MP3 file here.";
        document.body.appendChild(dropper);
        dropper.style.fontFamily = Globals.font;
        dropper.style.fontSize = "30px";
        dropper.style.color = "rgb(255,255,255)"
        dropper.style.backgroundColor = "rgb(255,255,255,.4)"
        dropper.style.textAlign = "center";
        dropper.style.padding = String(screen.height / 3 + "px") + " " + String(0) + " " + String(screen.height / 3 + "px");
        dropper.style.background = "radial-gradient(circle, rgba(255,255,255,0) 0%, rgba(220,225,255,1) 100%)";
        dropper.setAttribute("id", "dropper");
        //let width = dropper.innerHTML.width(Globals.font);
        dropper.style.left = String(0 + "px");
        dropper.style.top = String(0 + "px");
        $(dropper).animate({
            opacity: .5
        }, {
            duration: 500
        });
        dropper.ondragenter = function (event) {
            $(dropper).animate({
                opacity: 1
            }, 500)
            return false;
        }
        dropper.ondragleave = function (event) {
            $(dropper).animate({
                opacity: .5
            }, 500)
            return false;
        }
        dropper.ondragover = function (event) {
            event.preventDefault()
        }
        dropper.ondrop = function (event) {
            let success = false;
            event.preventDefault();
            Notes.data = event.dataTransfer;
            Notes.file = event.dataTransfer.files[0];
            Notes.item = event.dataTransfer.items[0];
            $(dropper).animate({
                opacity: 0
            }, {
                duration: 2000,
                complete: function () {
                    if (success) {
                        Notes.hideDropper();
                        Notes.begin();
                    }
                    else {
                        $(dropper).animate({
                            opacity: .5
                        }, {
                            duration: 1000
                        })
                    }
                }
            })
            if (Notes.file.type == "audio/mpeg" || Notes.file.type == "audio/ogg") {
                success = true;
                dropper.innerHTML = Notes.file.name;
                Notes.musicName = Notes.file.name;
                if (Notes.audio != undefined) {
                    Notes.audio.remove();
                }
                Notes.audio = undefined;
                let reader = new FileReader();

                reader.onload = function (event2) {
                    let audio = document.createElement("audio");
                    Notes.audio = audio;
                    audio.src = event2.target.result;
                    audio.setAttribute("id", "music");
                }
                reader.readAsDataURL(Notes.file);
            }
            else {
                success = false;
                alert("Invalid File Type. Please use MP3 or OGG files!");
                dropper.style.opacity = .5;
                dropper.innerHTML = "oop wrong file type. TRY AGAIN!";
            }
        }
    }
    static hideDropper() {
        Notes.dropper.ondragenter = null;
        Notes.dropper.ondragleave = null;
        Notes.dropper.ondragover = null;
        Notes.dropper.ondrop = null;
        Notes.dropper.remove();
    }
    static begin() {
        Notes.difficulty = undefined;
        Notes.audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        Notes.analyser = Notes.audioCtx.createAnalyser();
        let audio = Notes.audio;
        //Use to remove delay to visualizer
        let listenAudio = Notes.audio.cloneNode();
        listenAudio.setAttribute("id", "cloneAudio");
        listenAudio.play();
        listenAudio.loop = true;
        listenAudio.currentTime = Globals.audioDelay; //.2
        //
        audio.play();
        audio.loop = true;
        audio.playbackRate = 1;
        audio.volume = 1;
        audio.currentTime = 0;
        let musicName = Notes.musicName;
        document.body.appendChild(audio);
        //prep analyser array thingy
        Notes.source = Notes.audioCtx.createMediaElementSource(listenAudio); //use just plain audio if bugs out
        //Notes.source.connect(Notes.analyser);
        Notes.listen = Notes.audioCtx.createGain();

        Notes.source.connect(Notes.listen);
        Notes.listen.connect(Notes.analyser);
        //Notes.analyser.connect(Notes.audioCtx.destination); RECONNECT IF U DONT LIKE THE DELAY HACKY THING

        Notes.frequencyData = new Uint8Array(Notes.analyser.frequencyBinCount);
        Notes.analyser.smoothingTimeConstant = .9; //Changes FFT ONLY STUFF ITS IMPORTANTE i think? .95/.90 looks cute
        //
        let titleLabel = document.createElement("h1");
        titleLabel.style.fontFamily = Globals.font;
        titleLabel.innerHTML = String(musicName.substring(0, musicName.length - 4));
        titleLabel.style.position = "absolute";
        titleLabel.style.top = String(screen.height / 6 + "px");
        titleLabel.style.zIndex = "99";
        titleLabel.style.opacity = "0";
        titleLabel.style.fontWeight = "2";
        titleLabel.style.color = "rgb(255,255,255)";
        titleLabel.style.fontSize = "50px";
        titleLabel.style.fontWeight = "bold";
        titleLabel.style.left = "-500px";
        titleLabel.setAttribute("class", "text");
        document.body.appendChild(titleLabel);

        let durationLabel = document.createElement("h1");
        durationLabel.style.fontFamily = Globals.font;
        if (String(audio.duration % 60).length == 1) {
            durationLabel.innerHTML = String(Math.trunc(audio.duration / 60) + ":0" + String(audio.duration % 60))
        }
        else {
            durationLabel.innerHTML = String(Math.trunc(audio.duration / 60) + ":" + String(audio.duration % 60).substring(0, 2))
        }
        durationLabel.setAttribute("class", "text");
        durationLabel.style.position = "absolute";
        durationLabel.style.top = String(screen.height / 4 + "px");
        durationLabel.style.zIndex = "99";
        durationLabel.style.opacity = "0";
        durationLabel.style.fontWeight = "2";
        durationLabel.style.color = "rgb(255,255,255)";
        durationLabel.style.left = "-500px";
        durationLabel.style.fontSize = "25px"
        document.body.appendChild(durationLabel);
        //Animate them into existence or visibility xd

        //diffilculty stuff
        let choose = document.createElement("h1");
        choose.innerHTML = "Choose Difficulty to Begin";
        document.body.appendChild(choose);
        choose.setAttribute("class", "text");
        choose.style.left = "-500px"
        choose.style.opacity = "0";
        choose.style.top = String(screen.height / 2.5 + "px");


        let easyButton = document.createElement("div");
        document.body.appendChild(easyButton);
        easyButton.setAttribute("class", "buttons");
        easyButton.setAttribute("id", "easyButton");
        easyButton.style.top = String(screen.height / 2.1 + "px");
        easyButton.style.left = "-500px";
        easyButton.innerHTML = "";
        easyButton.style.opacity = "-2";
        easyButton.style.fontSize = "20px";
        easyButton.style.background = "radial-gradient(circle, rgba(255,255,255,.25) 0%, rgba(164,227,255,.8) 66%, rgba(164,227,255,0) 70%)";

        let mediumButton = document.createElement("div");
        document.body.appendChild(mediumButton);
        mediumButton.setAttribute("class", "buttons");
        mediumButton.setAttribute("id", "mediumButton");
        mediumButton.style.top = String(screen.height / 2.1 + "px");
        mediumButton.style.left = "-500px";
        mediumButton.innerHTML = "";
        mediumButton.style.opacity = "-2";
        mediumButton.style.fontSize = "20px";
        mediumButton.style.background = "radial-gradient(circle, rgba(255,255,255,.25) 0%, rgba(255,249,164,.8) 66%, rgba(255,249,164,0) 70%)";

        let hardButton = document.createElement("div");
        document.body.appendChild(hardButton);
        hardButton.setAttribute("class", "buttons");
        hardButton.setAttribute("id", "hardButton");
        hardButton.style.top = String(screen.height / 2.1 + "px");
        hardButton.style.left = "-500px";
        hardButton.innerHTML = "";
        hardButton.style.opacity = "-2";
        hardButton.style.fontSize = "20px";
        hardButton.style.background = "radial-gradient(circle, rgba(255,255,255,.25) 0%, rgba(255,164,164,.8) 66%, rgba(255,164,164,0) 70%)";

        setTimeout(() => {
            $(titleLabel).animate({
                opacity: 1,
                left: 10
            }, {
                duration: 1000
            })
        }, 1);

        setTimeout(() => {
            $(durationLabel).animate({
                opacity: 1,
                left: 10
            }, {
                duration: 800
            })
        }, 250);

        setTimeout(() => {
            $(choose).animate({
                opacity: 1,
                left: 10
            }, {
                duration: 1200
            })
        }, 500);

        //Buttons
        setTimeout(() => {
            //Put em here!
            $(easyButton).animate({
                opacity: 1,
                left: 55
            }, {
                duration: 2000
            });
            $(mediumButton).animate({
                opacity: 1,
                left: 155
            }, {
                duration: 2000
            });
            $(hardButton).animate({
                opacity: 1,
                left: 255
            }, {
                duration: 2000
            });
        }, 750);

        //background effect
        let lightThing = document.createElement("div");
        lightThing.setAttribute("id", "lightThing");
        lightThing.style.width = String(screen.width + "px");
        lightThing.style.height = String(screen.height + "px");
        lightThing.style.position = "absolute";
        lightThing.style.opacity = "0";
        lightThing.style.backgroundColor = "rgb(200,200,255)";
        lightThing.style.background = "radial-gradient(circle, rgba(63,94,251,0) 0%, rgba(190,235,255,1) 65%, rgba(200,246,255,1) 70%, rgba(107,152,172,1) 100%)";
        lightThing.style.zIndex = "2";
        document.body.appendChild(lightThing);
        Notes.lightThing = lightThing;

        function bgMusicEffect() {
            if (Notes.stopEffect == false) {
                window.requestAnimationFrame(bgMusicEffect);
            }
            Notes.analyser.getByteFrequencyData(Notes.frequencyData);
            let data = Notes.frequencyData;
            let n = 0;
            //Check for wrong delay
            if (Math.abs(listenAudio.currentTime - audio.currentTime) > Globals.audioDelay + .1) {
                listenAudio.currentTime = audio.currentTime + Globals.audioDelay;
            }
            //
            for (var i = 0; i < data.length; i++) {
                let v = data[i];
                n += v * (1 + Math.pow(i / data.length / 2, 2));
            }
            n /= data.length;
            //Notes.analyser.smoothingTimeConstant = .95 - clamp(n / 3, 0, .5)
            let detail = Globals.ring_effect_detail;
            //lightThing.style.opacity = String(Math.trunc(n * detail)/(detail * 100));
            lightThing.style.opacity = String(n / 100);
            lightThing.style.width = String(screen.width + Math.pow(n / 5, 2) + "px");
            lightThing.style.left = String(-Math.pow(n / 5, 2) / 2 + "px");
        }
        function chooseEffect(p) {
            let n = p;
            if (p == 1) { p = 0 } else { p = 1 }
            $(choose).animate({
                opacity: p
            }, {
                duration: 1000,
                complete: function () {
                    if (Notes.difficulty == undefined) {
                        chooseEffect(p);
                    }
                }
            })
        }
        chooseEffect(0);
        if (!Notes.alreadyRan) {
            Notes.alreadyRan = true;
            bgMusicEffect();
        }
        //button animations

        //easy button
        easyButton.onmouseenter = function () {
            $(easyButton).animate({
                width: 100,
                left: 55 - 25 / 2,
                height: 100,
                top: screen.height / 2.1 - 25 / 2
            }, {
                duration: 250
            })
        }
        easyButton.onmouseleave = function () {
            $(easyButton).animate({
                width: 75,
                left: 55,
                height: 75,
                top: screen.height / 2.1
            }, {
                duration: 150
            })
        }
        easyButton.onclick = function () {
            if (Notes.difficulty == undefined) { Notes.difficulty = "easy"; createNotes(); }
        }
        //

        //medium button
        mediumButton.onmouseenter = function () {
            $(mediumButton).animate({
                width: 100,
                left: 155 - 25 / 2,
                height: 100,
                top: screen.height / 2.1 - 25 / 2
            }, {
                duration: 250
            })
        }
        mediumButton.onmouseleave = function () {
            $(mediumButton).animate({
                width: 75,
                left: 155,
                height: 75,
                top: screen.height / 2.1
            }, {
                duration: 150
            })
        }
        mediumButton.onclick = function () {
            if (Notes.difficulty == undefined) { Notes.difficulty = "medium"; createNotes(); }
        }
        //

        //hard button
        hardButton.onmouseenter = function () {
            $(hardButton).animate({
                width: 100,
                left: 255 - 25 / 2,
                height: 100,
                top: screen.height / 2.1 - 25 / 2
            }, {
                duration: 250
            })
        }
        hardButton.onmouseleave = function () {
            $(hardButton).animate({
                width: 75,
                left: 255,
                height: 75,
                top: screen.height / 2.1
            }, {
                duration: 150
            })
        }
        hardButton.onclick = function () {
            if (Notes.difficulty == undefined) { Notes.difficulty = "hard"; createNotes(); }
        }
        //

        // Create the audio data
        function createNotes() {
            //loading text

            let loadingText = document.createElement("div");
            loadingText.setAttribute("class", "text");
            loadingText.setAttribute("id", "loadingText");
            loadingText.style.width = String(screen.width + "px");
            loadingText.style.height = String(screen.height + "px");
            loadingText.style.fontSize = "50px";
            loadingText.style.textAlign = "center";
            loadingText.innerHTML = "Creating notes, this won't take long.";
            loadingText.style.fontWeight = "bolder";
            loadingText.style.padding = String(screen.height / 2 + "px") + " " + String(0) + " " + String(screen.height / 3 + "px");
            loadingText.style.opacity = 0;
            loadingText.style.zIndex = "101";
            document.body.appendChild(loadingText);
            //
            Transitions.totalBlackScreen(1000);
            $(audio).animate({
                volume: 0
            }, {
                duration: 1000,
                complete: function () {
                    audio.pause();
                }
            })
            setTimeout(() => {
                $(loadingText).animate({
                    opacity: 1
                }, {
                    duration: 1000
                });
            }, 1000);

            //get music data
            const dataArray = [];
            const avgArray = [];
            setTimeout(() => {
                fetch(audio.src, {
                    mode: "no-cors"
                })
                    .then((response) => response.arrayBuffer())
                    .then((arrayBuffer) => {
                        // It's of course also possible to re-use an existing
                        // AudioContext to decode the mp3 instead of creating
                        // a new one here.
                        let offlineAudioContext = new OfflineAudioContext({
                            length: 1,
                            sampleRate: Notes.audioCtx.sampleRate
                        });

                        return offlineAudioContext.decodeAudioData(arrayBuffer);
                    })
                    .then((audioBuffer) => {
                        const signal = new Float32Array(512);
                        //console.log(audioBuffer.sampleRate * Math.floor(audio.duration))

                        for (let i = 0; i < audioBuffer.sampleRate * audio.duration; i += signal.length) {
                            Meyda.windowing(signal, "blackman");
                            audioBuffer.copyFromChannel(signal, 0, i);

                            dataArray[dataArray.length] = Meyda.extract('amplitudeSpectrum', signal)

                        }

                        finished();
                        //console.log(dataArray)
                    });

            }, 2000);

            function finished() {
                let peaks = undefined;
                Notes.stopEffect = true;
                //console.log(dataArray.length/(audio.duration));
                audio.currentTime = 0;
                //audio.play();
                for (let i = 0; i < dataArray.length; i++) {
                    let data = dataArray[i];
                    let avg = 0;
                    for (let x = 0; x < data.length; x++) {
                        let add = data[x];
                        avg += add;
                    }
                    avg /= data.length;
                    avgArray[avgArray.length] = avg;
                    /*
                    let p = i;
                    setTimeout(()=>{
                        document.getElementById("blackScreen").style.opacity = String(avg); 
                        console.log(peaks[p]);
                    },i * (1000 * audio.duration/dataArray.length))
                    */
                }
                peaks = smoothed_z_score(avgArray, {
                    lag: 10,
                    threshold: 4,    //4 threshold for med 5 for easy 3 HARD
                    influence: 0
                });
                Notes.peaks = peaks;
                Notes.dataArray = dataArray;
                Notes.avgArray = avgArray;

                //Create physical notes
                const thrs = .1;
                const notesArray = [];
                for (let i = 0; i < peaks.length; ++i) { //time = i * (1000 * audio.duration/dataArray.length)
                    let peak = peaks[i];
                    if (peak === 1) {

                        let dataRawA = dataArray[i];
                        let dataRawB = dataArray[i - 1] || dataRawA; //possible change the pos of dataB to get increased frequency difference


                        //normalize bins
                        for (let x = 0; x < dataRawA.length; ++x) {
                            let d = dataRawA[x];
                            if (d > thrs) {
                                dataRawA[x] = 1;
                            }
                            else {
                                dataRawA[x] = 0;
                            }
                        }
                        for (let x = 0; x < dataRawB.length; ++x) {
                            let d = dataRawB[x];
                            if (d > thrs) {
                                dataRawB[x] = 1;
                            }
                            else {
                                dataRawB[x] = 0;
                            }
                        }
                        //console.log(dataRawA);

                        let dataA = dataBin(dataRawA, keyboard.length); //  binned/histogramy data
                        let dataB = dataBin(dataRawB, keyboard.length);

                        let difference = binDifference(dataA, dataB);
                        let maximums = findMaximums(difference, 3); //correspond 1 to difficulty
                        let time = Math.floor(i * (1000 * audio.duration / dataArray.length) + .5);
                        let differenceVal = addValues(difference);
                        let obj = {
                            note: maximums,
                            time: time,
                            peak : i
                        }
                        console.log(maximums)
                        if (differenceVal !== 0) {
                            /*
                            console.log(difference)
                            console.log(peak)
                            console.log(obj);
                            console.log(dataA)
                            */
                            notesArray[notesArray.length] = obj;
                        }
                    }
                }
                //ADD FUNCTION THAT CHECKS FOR DUPLICATE NOTES !!!!!
                for (let i = 0; i < notesArray.length;++i){
                    let time1 = notesArray[i].time;
                    for (let e = 0;e < notesArray.length;++e){
                        if (i !== e){
                            let time2 = notesArray[e].time;
                            if (Math.abs(time1 - time2) < 500){
                                notesArray.splice(i,1);
                                break
                            }
                        }
                    }
                }
                /*
                for (let i = 0; i < notesArray.length; i++) {
                    let note1 = notesArray[i].note;
                    let note2 = notesArray[i + 1];
                    if (note2 !== undefined) {
                        note2 = note2.note;
                        let distance = Math.abs(notesArray[i].time - notesArray[i + 1].time);
                        if (note1 === note2 && distance < 500) {
                            notesArray.splice(i, 1);
                        }
                    }
                }
                */
                Notes.notes = notesArray;
                setTimeout(() => {
                    begin();
                }, 3000)
            }
            function findMaximums(array, threshold) { //amount recursion isnt made yet
                let peaks = undefined;
                let notes = [];
                peaks = smoothed_z_score(array, {
                    lag: 3,
                    threshold: threshold,    //4 threshold for med 5 for easy 3 HARD
                    influence: 0
                });
                for (let i = 0;i < keyboard.length;++i){ //change keyboard.length to peaks if it breaks
                    let v = peaks[i];
                    if (v === 1){
                        notes[notes.length] = i;
                    }
                }
                return notes;
            }
            function addValues(array) {
                let val = 0;
                for (let i = 0; i < array.length; ++i) {
                    val += array[i];
                }
                return val;
            }
            function dataBin(array, splices) { //returns binned array
                let newArray = [];
                let divide = Math.floor((array.length / 2) / splices);
                for (let i = 0; i < Math.floor(array.length / 2); ++i) {
                    let data = array[i];
                    if (i % divide == 0) {
                        let segment = [];
                        newArray[newArray.length] = segment;
                    }
                    let segment = newArray[newArray.length - 1];
                    segment[segment.length] = data;
                }
                return newArray;
            }
            function binDifference(bin1, bin2) { //bins must be the same length
                let newArray = [];
                for (let i = 0; i < bin1.length; ++i) { //create single value both arrays
                    let val1 = 0;
                    let val2 = 0;
                    let total = 0;
                    for (let e = 0; e < bin1[0].length; ++e) {
                        val1 += bin1[i][e];
                        val2 += bin2[i][e];
                    }
                    total = Math.abs(val1 - val2);
                    if (isNaN(total)) {
                        total = 0;
                    }
                    newArray[i] = total;
                }
                return newArray;
            }
            //

            //Begin GAME
            function begin() {
                let testDelay = 3000;

                let notes = Notes.notes;
                audio.pause();
                listenAudio.pause();
                Notes.stopEffect = false;
                easyButton.remove();
                mediumButton.remove();
                hardButton.remove();
                choose.remove();
                document.getElementById("lightThing").style.opacity = "0";
                bgMusicEffect();
                //loadingText.innerHTML = "have fun"
                $(titleLabel).animate({
                    opacity: 0
                }, {
                    duration: 8000
                })
                $(durationLabel).animate({
                    opacity: 0
                }, {
                    duration: 8000
                })
                $(loadingText).animate({
                    opacity: 0,
                    top: -250
                }, {
                    duration: 1500
                });
                Transitions.removeBlackScreen(1500);
                setTimeout(() => {
                    audio.volume = 1;
                    audio.currentTime = 0;
                    audio.loop = false;
                    listenAudio.loop = false;
                    listenAudio.currentTime = Globals.audioDelay;
                    audio.play();
                    listenAudio.play();
                    loadingText.remove();
                }, 8000 - testDelay);
                const elements = [];
                Notes.stopGame = false;
                setTimeout(() => {
                    updateNotes();
                    for (let i = 0; i < notes.length; ++i) {
                        let note = notes[i];
                        let time = note.time;
                        setTimeout(() => {
                            //console.log(data[note.peak])
                            createNote(note);
                        }, time);
                    }
                }, 5300 - testDelay);
                function createNote(note) {
                    let notes = note.note;
                    for (let i = 0;i < notes.length;++i){
                        let obj = {};
                        let key = notes[i];
                        elements[elements.length] = obj;
                        obj.top = 0;
                        obj.left = key * 55 + 25;
                        let div = document.createElement("div");
                        obj.element = div;
                        div.style.width = "50px";
                        div.style.height = "50px";
                        div.style.backgroundColor = "rgb(50,50,65)";
                        div.style.position = "absolute";
                        div.style.zIndex = "2000";
                        div.style.opacity = ".01";
                        //text
                        div.innerHTML = keyboard[key];
                        div.style.color = "rgb(200,200,255)"
                        div.style.fontFamily = Globals.font;
                        div.style.fontSize = "50px";
                        div.style.textAlign = "center";
                        div.style.fontWeight = "bolder";
                        document.body.appendChild(div);
                    }
                }
                function updateNotes() {
                    if (Notes.stopGame === false) {
                        window.requestAnimationFrame(updateNotes)
                    }
                    for (let i = 0; i < elements.length; ++i) {
                        let obj = elements[i];
                        let element = obj.element;
                        if (parseFloat(element.style.opacity) > 0) {
                            obj.top += 2;
                            element.style.top = String((obj.top) + "px");
                            element.style.left = String((obj.left) + "px");
                            if (obj.top > (screen.height - screen.height / 3.5)) {
                                element.style.opacity = String((parseFloat(element.style.opacity) - .05))
                            }
                            else {
                                element.style.opacity = String(clamp(parseFloat(element.style.opacity) + .02, 0, 1))
                            }
                        }
                        else{
                            element.remove();
                            elements.splice(i,1);
                            obj = undefined;
                        }
                    }
                }
            }
        }
    }
    static clear() {

    }
}

/*
function titleAnim(n){
                    $(titleLabel).animate({
                        opacity : 0
                    },{
                        duration : 1000,
                        complete : function(){
                            if (n === 1){
                                n = 0;
                            }
                            else{
                                n = 1;
                            }
                            titleAnim(n);
                        }
                    })
                }
                titleAnim(1);

                        let data = dataArray[i]; //Find highest frequency (loudest note)
                        let max = 0;
                        let maxIndex = 0;
                        for (let e = 0;e < data.length;e++){
                            let d = (data[e] + 100) * (e/500 + 1);
                            if (d > max){
                                max = d;
                                maxIndex = e;
                            }
                        }
                        console.log(maxIndex)
                        let keyMap = data.length/keyboard.length;
                        let key = Math.floor(maxIndex/keyMap + .5);
                        notes[notes.length] = {
                            time : i * (1000 * audio.duration/dataArray.length),
                            key : key
                        }
                        console.log('yes')
                        */


/*


            Notes.analyser.disconnect(Notes.audioCtx.destination); //disconnect , get ready for file analysis
            Notes.analyser.smoothingTimeConstant = 0.0;
            var interval = .01; //added time reducer loading thing
            Transitions.topToDownBlackScreen(1000)
            setTimeout(() => {
                document.body.appendChild(loadingText)
                loadingText.style.zIndex = "101";
                $(loadingText).animate({
                    opacity: 1
                }, {
                    duration: 2500
                })

                Notes.stopEffect = true; //stop the effect for now so no 2 updates
                //wait for the BLACK SCREEN so no lag is shown
                Notes.source.connect(Notes.listen);
                Notes.listen.connect(Notes.analyser);
                audio.currentTime = 0;
                audio.pause();
                audio.play();
                audio.playbackRate = 16;
                let n = 0;
                function recurse() {

                    Notes.analyser.getByteFrequencyData(Notes.frequencyData);
                    let newArray = [];
                    let data = Notes.frequencyData;
                    for (let i = 0; i < data.length; i++) {
                        let val = data[i];
                        newArray[i] = {
                            data: val,
                            time: audio.currentTime
                        };
                    }
                    Notes.rawNotes[Notes.rawNotes.length] = newArray;
                    //console.log(newArray);
                    //console.log(audio.timePosition)
                    //audio.currentTime = audio.currentTime + interval;
                    const testAvg = [];
                    if (audio.currentTime < audio.duration) {
                        window.requestAnimationFrame(recurse);
                    }
                    else {
                        Notes.peakNotes = [];
                        Notes.peakNotesTime = [];
                        for (var i = 0; i < Notes.rawNotes.length; i++) {
                            let array = Notes.rawNotes[i];
                            let dataAvg = 0;
                            for (var e = 0; e < array.length; e++) {
                                let data = array[e].data;
                                if (data !== 0){
                                    data = 200;
                                }
                                dataAvg += data;
                                //dataAvg += data + Math.pow(data/65,2);
                            }
                            dataAvg /= array.length;
                            Notes.peakNotes[Notes.peakNotes.length] = dataAvg;
                            Notes.peakNotesTime[Notes.peakNotesTime.length] = array[0].time;

                            testAvg[testAvg.length] = {
                                data : dataAvg,
                                time : array[0].time
                            };
                        }
                        let peaks = smoothed_z_score(Notes.peakNotes, {
                            lag: 50,
                            threshold: 2,
                            influence: 0
                        });
                        for (var i = 0; i < peaks.length; i++) {
                            let peak = peaks[i];
                            let time = Notes.peakNotesTime[i];
                            let obj = {
                                data: peak,
                                time: time
                            };
                            Notes.peakNotes[i] = obj;
                        }
                        Notes.analyser.connect(Notes.audioCtx.destination); //reconnect the audio
                        audio.playbackRate = 1;
                        console.log("yes")
                        audio.currentTime = 0;
                        audio.play();
                        //test
                        let peak = Notes.peakNotes;
                        let on = false;
                        for (var i = 0; i < peaks.length; i++) {
                            let data = peak[i].data;
                            let time = peak[i].time;
                            let audioTime = audio.currentTime;
                            if (data !== 0) {
                                setTimeout(function () {
                                    if (on){
                                        on = false;
                                        //document.body.querySelector("#blackScreen").style.opacity = 0;
                                    }
                                    else{
                                        on = true;
                                        //document.body.querySelector("#blackScreen").style.opacity = 1;
                                    }
                                    console.log(time + " ---- " + audio.currentTime)
                                }, time * 1000 - 500)
                            }
                            let data2 = testAvg[i].data
                            setTimeout(function(){
                                document.body.querySelector("#blackScreen").style.opacity = String(data2/50);
                            }, testAvg[i].time * 1000 -500)
                        }
                        //

                    }
                }
                recurse(0);
            }, 1000);
*/